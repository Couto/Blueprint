Blueprint - Sugar syntax for Prototypal Inheritance
===================================================

Why another?
------------

I wanted a small utility (871 bytes gzipped) that could easily be used to create Classes, but with the MooTools' Class interface, and without the overhead…

yeahh… that's the only reason.

It supports:
------------

* __Inheritance__ one object can inherit methods from another.
* __Mixins__ one object can "inherit" several methods from several objects, as their own.
* __Context__ A Bind method similar to MooTools where you could easily fix the methods context (useful for events…).
* __Super__ Call parent methods, even if they were "overwritten".
* __Constructor/Lazy Instantion__ 
* __Static Methods__ these are not inherited by child classes.
* __Fast__ its instanciation should be *au pair* with the fastest Class systems available. [JSPerf Perfomance Page](http://jsperf.com/moo-resig-ender-my/8)

Beware
------
__it's still under development__

TODO
----
* A decent page for tests.
* Finish testing.
* Measure the Parent call performace.

----

Example of Use
==============
    
Simple instantiation
--------------------
    var Example = Blueprint({
        init : function(){
            // code that will run on instantiation
        },
        method1 : function(){},
        method2 : fucntion(){}
    });
    
    var example = new Example('args');
    example.method1();
    
Lazy instantiation with Parent Object
-------------------------------------

    var Example2 = Blueprint({
        Extends : Example,
        initialize : function(){},
        method2 : function(){
            // Call parent method
            Example2.Super.method2.call(this)
        }
    });
    
    var example2 = new Example2();
    example2.initialize();
    example2.method2()
    
Mixins
------

    var Mixin = Blueprint({
        mixinMethod1 : function(){},
        mixinMethod2 : function()
    });
    
    var Example3 = Blueprint({
        Extends : Example2, // Optional
        Implements : Mixins,
        method2 : function(){
            Example3.Super.method2.call(this) // Call Parent method
        }
    });
    
    var example3 = new Example3();
    example3.mixin1Method1();
    
---

Static Methods
--------------

    var Example4 = Blueprint({
        method4 : function(){
            Example4.Super.method2.call(this) // Call Parent method
        },
        Static : {
            staticMethod : function(){}
        }
    });
    
    Example4.staticMethod();
    
---


Feel free to pull requests, open issues and so on… right now, i'm quite open to ideas, improvements and suggestions.